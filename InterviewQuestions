Feature of c#3
------------------
Extension Method.
Partial Method.
 The declaration of the partial method must begin with partial modifier.
 The partial method may contain ref.
 The partial method does not contain out parameters.
 It is implicitly private method.
 It can be a static method.
 Partial method is generic.
 It can have only void return type.
 A partial method is created only in partial class or in partial struct.
==========================
Feature of c#4
--------------------
CoVariance/ContraVariance
Indexed Properties/Indexer in C#
     ->An indexer is same as property except that it defined with this keyword with square bracket that takes paramter.
     ->Indexer can be override by having different types of parameters.
     ->Ref and out parameter with the indexer is not supported.
     ->Indexer can be included as an interface member.
============================



Questions to be asked
--------------------------
SQL =>Cricket Match
C#=>SOLID Principle
Default Scope of Member of class-Private
Default value of class level Object-null
What is Boxing and UnBoxing
Jump statements in c#=>goto,break,Continue,Return
Difference between Encapsulation and abstraction.
Constructor and its types.
Difference between Constnt and Readonly is constant variable is single copy for the whole class where readonly is single copy for each object of class.
Can we parameterized sttic constructor--No
Operator Overloading

CSS
====
What is difference between em,Rem,Px.
     ->Em:An Em is equal to the computed font-size of that elementâ€™s parent. For example,
          If there is a div element defined with font-size: 16px then for that div and for its children 1em = 16px.

      ->Rem:rem values are relative to the root html element, not to the parent element. 
               That is, If font-size of the root element is 16px then 1 rem = 16px for all elements.

      ->Px:Pixels are the easiest measurement to use. pixels may be good at spacing and layout but are not good fit for font-size.
DesignPattern and UML Diagram
==================================
Creational Patterns: These design patterns provide ways to create objects while hiding the creation logic,
                                                                      instead of instantiating objects directly using the new operator. 
                     This gives the program more flexibility in deciding which objects need to be created for a given use case.
Structural Patterns: These design patterns deal with class and object composition. 
                     The concept of inheritance is used to compose interfaces and define ways to compose objects to obtain new functionality.
Behavioral Patterns: These design patterns are specifically concerned with communication between objects.
SOLID Principle:-
===========================================
S: Single Responsibility Principle (SRP)
O: Open closed Principle (OSP)
L: Liskov substitution Principle (LSP)
I: Interface Segregation Principle (ISP)
D: Dependency Inversion Principle (DIP)
SQL Server
============
 ACID (Atomicity, Consistency, Isolation, and Durability)
====================
Entity Framework
====================
Discuss strategies for handling large datasets in EF Core.
When dealing with large datasets in EF Core, consider the following strategies:

Pagination: Retrieve data in manageable chunks using methods like Skip() and Take() to limit the amount of data loaded at once.
Asynchronous Queries: Use asynchronous methods (e.g., ToListAsync()) to avoid blocking the main thread and improve scalability.
Projection: Select only the necessary fields instead of loading entire entities, reducing memory usage.
Indexing: Ensure that the database has appropriate indexes to speed up data retrieval operations.
Batch Processing: Process data in batches to reduce the number of database operations and manage resource usage effectively.
